깃과 깃허브는 다르다.

local 상태 = 인터넷이 없는 상태

깃
깃의 본질은 VCS (Version Control System)이다
VCS는 깃만 있는게 아니다.
자료 하나하나 수정되는 것들이 버전이라고 볼수있다.
세상에서 가장 많이 사용되는 VCS는 깃이다.
버전관리를 위한 도구이다.
깃은 인터넷이 없어도 깃의 자체 도구만으로도 모든 파일에 대해
관리가 가능하다.
깃은 인터넷이 없어도 사용이 가능하지만, 인터넷과 같이 사용하면 
활용도가 엄청나다.

깃허브
깃을 올릴 수 있는 (클라우드)공간이다. 그래서 깃.허브이다.

CUI, GUI
코드 기반의 유저 인터페이스(CUI 글자)
그래픽 기반의 유저 인터페이스 (GUI 그림)
유저 인터페이스란? 인터 -> 맞닿아진, 연결된
유저들간 상호작용 하는 부분 (화면)

비록 CUI가 처음에 어렵고 힘들지만
익숙해지면 GUI와 작업 속도 차이가 나고, 호환성이 좋다.

어떤 단축키 기능이 있는데 그 단축키에 shift를 붙이면 
보통 이전으로 돌아간다.

버전은 절대적인 것이 아닌 상대적인 것이다.
버전을 나누는 주관적인 의미는 얼마나 의미가 있느냐로 나눌 수 있다.

- 터미널 자체의 기본 명령어 -
cd = change directory
cd ~  = 맨 처음으로 간다
디렉토리 = 폴더

ls = List
하위 디렉토리를 보는 방법은 ls를 사용
현재 디렉토리는 .을 붙이면 된다.
.. 두개는 뒤에 디렉토리로 가는 것이다.

mkdir = make directory 디렉토리를 만드는 명령어
pwd = print working diretory 현재 디렉토리 위치를 알려주는 명령어

ni = new item 파일을 만드는  명령어

echo 텍스트 > 파일명.파일 = 현재 위치해 있는 디렉토리에 파일을
추가 하면서 안에 내용까지 저장이 됨

clear = powershell 명령창을 청소해주는 것이다.

- 깃에 관한 명령어 -
git을 붙이면 된다.
init = initialize
status = 정보, 상태 -> Untracked files을 사용해서 나오는 파일은
추적이 안된 파일이고, 버전 갱신이 안되어있다.
Repository에 들어가면 별다른 표시가 안나온다
-> (수정이 되면 다시 표시가 된다.)

add 파일명 = 파일을 추적하겠다는 뜻이다.
임시 저장 공간에 옮기는 과정이라고 생각하면 쉽다. (Stage Fixeds, 검토)

add . = 깃 디렉토리 안에 있는 모든 것을 파일을 추적한다.

commit = 복사 붙여넣기와 비슷하다 하지만 엄밀히 따지면 아니다.
Commit을 하면 저장 공간에 옮기는 과정이다. 
-> (버전이지만 엄밀히 따지면 아니다.)
commit -m 메세지명 = 커밋을 할때 메세지를 남겨 주는 이유는
어떠한 내용인지를 메모하는 것,
메세지를 남겨주지 않으면 커밋을 할 수가 없다.

log = 깃에 대한 기록을 보겠다.

clone = 저장소 복제 및 다운로드

checkout (commit한 cheksum = id) 
= commit한 파일(버전)을 확인하는 것
프로젝트가 웬만큼 크지 않는한 4자리만 입력해도 겹치지 않고
프로젝트가 커도 6자리만 입력해도 겹치지 않는다.
제일 최근 파일로 갈때 master를 쓰는 이유는 나중에 가서 원치 않는 
결과를 도태해낼 수 있다.
Head는 내가 보고있는 시선(버전)으로 생각해도 된다.

remote Repository 리포지토리에 관한걸 할 것이다.

push = 지금까지 커밋 된 것들을 업로드 한다.

git push --set-upstream origin master = 내가 정한 origin 저장 위치에 
파일을 푸시 하는데 가리키고 있는 브랜치의 파일을 넣을거야.

pull = 작업하고 있는 워킹 디렉토리에서 워킹 디렉토리와 다른 변경사항을
워킹 디렉토리에 가져오는 것이다.
ex) 깃허브에서 변경한 점을 내꺼 파일에 저장을 한다.